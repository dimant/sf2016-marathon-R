source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
marathon[1:5,]
marathon[1:5,1]
allT
mean(allTimes)
var(allTimes)
sd(allT)
sd(allTimes)
var(allTi)
var(allTimes)
sd(allTimes)
sqrt(var(allTimes))
skewness(allTimes)
kur(allTimes)
kurtosis(allTimes)
hist(allTimes)
hist(allTimes, main)
rtvs::debug_source("script.R")
hist(allTimes, main="")
rtvs::debug_source("script.R")
hist(allTimes, main="", xlab = "time")
hist(allTimes, main="", xlab = "Time")
boxplot(allTi)
boxplot(allTimes)
boxplot(allTimes, xlab="Time")
boxplot(allTimes, ylab="Time")
barchart(genders)
barplot(genders)
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
barplot(genders)
genders
barplot(table(genders))
plot(rnorm(500))
hist(rnorm(500))
plot(density(rnorm(500)))
plot(density(rnorm(1000)))
plot(density(rnorm(10000)))
plot(density(rnorm(50000)))
plot(density(rnorm(50000)))
plot(qnorm)
plot(pnorm)
plot(rnorm)
plot(qnorm)
?rnorm
plot(dnorm)
plot(dnorm, from=-1.5, to=1.5)
plot(dnorm, from=-6, to=6)
plot(dnorm, from=-3, to=3)
plot(dnorm, from=-3, to=3, ylap=p)
plot(dnorm, from=-3, to=3, ylap="p")
plot(dnorm, from=-3, to=3, ylab="p")
plot(dnorm, ylab="p", from=-3, to=3)
plot(dnorm, ylab="p", from=-3, to=3)
?dnorm
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
 hist(allTimes, main="", xlab = "Time")
?hist
 hist(allTimes, main="", xlab = "Time", breaks = 10)
 hist(allTimes, main="", xlab = "Time", breaks = 20)
 hist(allTimes, main="", xlab = "Time", breaks = 100)
 hist(allTimes, main="", xlab = "Time", breaks = 5)
 hist(allTimes, main="", xlab = "Time", breaks = 50)
 hist(allTimes, main="", xlab = "Time", breaks = 100)
par(mfrow(2, 1))
par(mfrow=c(2, 1))
 hist(allTimes, main="", xlab = "Time", breaks = 10)
 hist(allTimes, main="", xlab = "Time", breaks = 100)
par(mfrow=c(1, 2))
 hist(allTimes, main="", xlab = "Time", breaks = 10)
 hist(allTimes, main="", xlab = "Time", breaks = 100)
par(mfrow = c(1, 2)) hist(allTimes, main = "", xlab = "Time", breaks = 10) hist(allTimes, main = "", xlab = "Time", breaks = 100)
par(mfrow = c(2, 2)) hist(allTimes, main = "", xlab = "Time", breaks = 5) hist(allTimes, main = "", xlab = "Time", breaks = 10) hist(allTimes, main = "", xlab = "Time", breaks = 100)
?par
par(new=TRUE)
 hist(allTimes, main="", xlab = "Time", breaks = 100)
 hist(allTimes, main="", xlab = "Time", breaks = 100)
par(mfrow = c(2, 2)) hist(allTimes, main = "", xlab = "Time", breaks = 5) hist(allTimes, main = "", xlab = "Time", breaks = 10) hist(allTimes, main = "", xlab = "Time", breaks = 100) par(mfrow = c(1, 1))
par(mfrow = c(2, 2)) hist(allTimes, main = "5 bins", xlab = "Time", breaks = 5) hist(allTimes, main = "10 bins", xlab = "Time", breaks = 10) hist(allTimes, main = "100 bins", xlab = "Time", breaks = 100) par(mfrow = c(1, 1))
barplot(sort(letterTime, decreasing =TRUE))
plot(nameLetterFreqs[,1] ~ allQuantiles)
barplot(sort(letterTime, decreasing =TRUE))
plot(nameLetterFreqs[,1] ~ allQuantiles)
barplot(sort(letterAgeGrade, decreasing =TRUE))
plot(nameLetterFreqs[,1] ~ allAgeGradeQt)
barplot(sort(letterTime, decreasing =TRUE))
barplot(sort(letterTime, decreasing =TRUE), ylab="% of variance explained")
barplot(sort(letterAgeGrade, decreasing = TRUE), ylab = "% of variance explained")
plot(nameLetterFreqs[,1] ~ allQuantiles)
?plot
plot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "Quantiles")
boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "Quantiles")
?boxplot
boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "Quantiles")
        "50%-60%", "60%-70%", "70%-80%", "80%-90%", "90%-100%"))
boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "Quantiles",      names = c(         "0%-10%", "10%-20%", "20%-30%", "30%-40%", "40%-50%",          "50%-60%", "60%-70%", "70%-80%", "80%-90%", "90%-100%"))
boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "Quantiles",      names = c(         "0%-10%", "10%-20%", "20%-30%", "30%-40%", "40%-50%",          "50%-60%", "60%-70%", "70%-80%", "80%-90%", "90%-100%"))
    names = 1:10)
boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "Quantiles", names = 1:10)
boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10)
boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10, ylab="frequency letter a")
boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10, ylab="frequency letter of a")
boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10, ylab="frequency of letter a")
boxplot(nameLetterFreqs[, 1] ~ allAgeGradeQt, xlab = "bins", names = 1:10, ylab = "frequency of letter a")
boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10, ylab="frequency of letter a")
par(mfrow=c(1,2)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained") boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10, ylab="frequency of letter a")
par(mfrow=c(2,1)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained") boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10, ylab="frequency of letter a")
par(mfrow = c(2, 1)) barplot(sort(letterAgeGrade, decreasing = TRUE), ylab = "% of variance explained") boxplot(nameLetterFreqs[, 1] ~ allAgeGradeQt, xlab = "bins", names = 1:10, ylab = "frequency of letter a")
par(mfrow=c(2,1)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained") boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10, ylab="frequency of letter a")
par(mfrow = c(2, 1)) barplot(sort(letterAgeGrade, decreasing = TRUE), ylab = "% of variance explained") boxplot(nameLetterFreqs[, 1] ~ allAgeGradeQt, xlab = "bins", names = 1:10, ylab = "frequency of letter a")
par(mfrow=c(2,1)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained", title="% variance explained by letter") boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10, ylab="frequency of letter a", title="Frequence of letter a by time")
par(mfrow=c(2,1)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained", main="% variance explained by letter") boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10, ylab="frequency of letter a", main="Frequence of letter a by time")
par(mfrow=c(2,1)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained", main="% variance of time explained by letter") boxplot(nameLetterFreqs[, 1] ~ allQuantiles, xlab = "bins", names = 1:10, ylab="frequency of letter a", main="Frequency of letter a by time")
par(mfrow = c(2, 1)) barplot(sort(letterAgeGrade, decreasing = TRUE), ylab = "% of variance explained", main = "% variance of age grade explained by letter") boxplot(nameLetterFreqs[, 1] ~ allAgeGradeQt, xlab = "bins", names = 1:10, ylab = "frequency of letter a", main = "Frequency of letter a by age grade")
nameLetterFreqs[, 1] ~ allQuantiles
x <- nameLetterFreqs[, 1] ~ allQuantiles
x
x[1]
split(nameLet)
split(allQ)
split(allQuantiles, nameLetterFreqs[,1])
sapply(split(allQuantiles, nameLetterFreqs[,1]), median)
split(allQuantiles, nameLetterFreqs[,1])
split(allQuantiles, nameLetterFreqs[,1])
count
length()
sapply(split(allQuantiles, nameLetterFreqs[,1]), length)
allQ
as.integer(allQuantiles)
sapply(split(allQuantiles, nameLetterFreqs[,1]), asInteger)
sapply(split(allQuantiles, nameLetterFreqs[,1]), as.integer)
sapply(sapply(split(allQuantiles, nameLetterFreqs[,1]), as.integer), median)
barplot(sapply(sapply(split(allQuantiles, nameLetterFreqs[,1]), as.integer), median))
typeof(allQuantiles)
typeof(allQuantiles)[1]
median(allQuantiles)
allQuantiles[1]
allQuantiles
split(allQuantiles, nameLetterFreqs[,1])
sapply(split(allQuantiles, nameLetterFreqs[,1]), as.integer)
split(allQuantiles, nameLetterFreqs[,1])
split(allQuantiles, nameLetterFreqs[,1])
allQ
allQuantiles
split(nameL allQuantiles
split(nameLetterFreqs, allQuantiles)
split(nameLetterFreqs[,1], allQuantiles)
sapply(split(nameLetterFreqs[,1], allQuantiles), median)
barplot(sapply(split(nameLetterFreqs[,1], allQuantiles), median))
barplot(sapply(split(nameLetterFreqs[,1], allQuantiles), median), names = 1:10)
barplot(sapply(split(nameLetterFreqs[,1], allQuantiles), median), names = 1:10)barplot(sapply(split(nameLetterFreqs[, 1], allQuantiles), median), xlab = "bins", names = 1:10, ylab = "frequency of letter a", main = "Frequency of letter a by time")
barplot(sapply(split(nameLetterFreqs[, 1], allQuantiles), median), xlab = "bins", names = 1:10, ylab = "frequency of letter a", main = "Frequency of letter a by time")
barplot(sapply(split(nameLetterFreqs[, 1], allQuantiles), median), xlab = "bins", names = 1:10, ylab = "frequency of letter a", main = "Frequency of letter a by time")
par(mfrow=c(2,1)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained", main="% variance of time explained by letter") barplot(sapply(split(nameLetterFreqs[, 1], allQuantiles), median), xlab = "bins", names = 1:10, ylab = "frequency of letter a", main = "Frequency of letter a by time") par(mfrow = c(1, 1))
barplot(sapply(split(nameLetterFreqs[, 1], allQuantiles), median), xlab = "bins", names = 1:10, ylab = "median frequency of letter a", main = "Frequency of letter a by time")
par(mfrow=c(2,1)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained", main="% variance of time explained by letter") barplot(sapply(split(nameLetterFreqs[, 1], allQuantiles), median), xlab = "bins", names = 1:10, ylab = "median frequency of letter a", main = "Frequency of letter a by time") par(mfrow = c(1, 1))
par(mfrow = c(2, 1)) barplot(sort(letterAgeGrade, decreasing = TRUE), ylab = "% of variance explained", main = "% variance of age grade explained by letter") barplot(sapply(split(nameLetterFreqs[, 1], allAgeGradeQt), median), xlab = "bins", names = 1:10, ylab = "median frequency of letter a", main = "Frequency of letter a by time") par(mfrow = c(1, 1))
par(mfrow=c(2,1)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained", main="% variance of time explained by letter") barplot(sapply(split(nameLetterFreqs[, 1], allQuantiles), median), xlab = "bins", names = 1:10, ylab = "median frequency of letter a", main = "Frequency of letter a by time") par(mfrow = c(1, 1))
par(mfrow = c(2, 1)) barplot(sort(letterAgeGrade, decreasing = TRUE), ylab = "% of variance explained", main = "% variance of age grade explained by letter") barplot(sapply(split(nameLetterFreqs[, 1], allAgeGradeQt), median), xlab = "bins", names = 1:10, ylab = "median frequency of letter a", main = "Frequency of letter a by time") par(mfrow = c(1, 1))
par(mfrow=c(2,1)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained", main="% variance of time explained by letter") barplot(sapply(split(nameLetterFreqs[, 1], allQuantiles), median), xlab = "bins", names = 1:10, ylab = "median frequency of letter a", main = "Frequency of letter a by time.") par(mfrow = c(1, 1))
par(mfrow=c(2,1)) barplot(sort(letterTime, decreasing = TRUE), ylab = "% of variance explained", main="% variance of time explained by letter.") barplot(sapply(split(nameLetterFreqs[, 1], allQuantiles), median), xlab = "bins", names = 1:10, ylab = "median frequency of letter a", main = "Frequency of letter a by time.") par(mfrow = c(1, 1))
par(mfrow = c(2, 1)) barplot(sort(letterAgeGrade, decreasing = TRUE), ylab = "% of variance explained", main = "% variance of age grade explained by letter.") barplot(sapply(split(nameLetterFreqs[, 1], allAgeGradeQt), median), xlab = "bins", names = 1:10, ylab = "median frequency of letter a", main = "Frequency of letter a by age grade.") par(mfrow = c(1, 1))
par(mfrow = c(2, 2)) hist(allTimes, main = "5 bins", xlab = "Time", breaks = 5) hist(allTimes, main = "10 bins", xlab = "Time", breaks = 10) hist(allTimes, main = "100 bins", xlab = "Time", breaks = 100) par(mfrow = c(1, 1))
marathon$pace
times(marathon$pace)
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
?times
concat
paste("00:", marathon$pace[1])
paste("00:", marathon$pace[1], "")
?paste
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
sapply(marathon$pace, function(x) { paste("00:", x, sep=""); })
unlist(sapply(marathon$pace, function(x) { paste("00:", x, sep=""); }))
times(unlist(sapply(marathon$pace, function(x) { paste("00:", x, sep=""); })))
times(unlist(sapply(marathon$pace, function(x) { paste("00:", x, sep=""); })))*secP
times(unlist(sapply(marathon$pace, function(x) { paste("00:", x, sep=""); })))*secPerDay
paces <- times(unlist(sapply(marathon$pace, function(x) { paste("00:", x, sep = ""); }))) * secPerDaytimes(unlist(sapply(marathon$pace, function(x) { paste("00:", x, sep=""); })))*secPerDay
paces <- times(unlist(sapply(marathon$pace, function(x) { paste("00:", x, sep = ""); }))) * secPerDay
paces
rownames(paces) <- c()
paces
paces[,1]
paces[1]
paces <- t(paces)
paces
rownames(paces) <- c()
paces
colnames(paces) <- c()
paces
paces <- times(unlist(sapply(marathon$pace, function(x) { paste("00:", x, sep = ""); }))) * secPerDay colnames(paces) <- c()
paces
paces[1]
plot(paces)
hist(paces)
shapiro
shapiro.test(paces)
qqline(paces)
as.a
as.array(paces)
as.vector(paces)
paces <- as.vector(times(unlist(sapply(marathon$pace, function(x) { paste("00:", x, sep = ""); }))) * secPerDay)as.vector(paces)
paces <- as.vector(times(unlist(sapply(marathon$pace, function(x) { paste("00:", x, sep = ""); }))) * secPerDay)
paces
median(paces)
qql
qqline(paces)
qqpl
qqplot(paces)
qqnorm(paces)
pearson.test(paces)
install.
install.packages(nortest)
install.packages("nortest")
ad.test(paces)
library(nortest)
ad.test(paces)
cvm.test(paces)
pearson
pearson.test(paces)
sf.test(paces)
skewness.norm.test
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
errorSum <- function(x, d) {      sum(abs(d - x)) }
errorSum(31, 30:45)
curve(x = y, 0, 100)
curve(sin, 0, 100)
errorExample <- function(x) {     errorSum(x, 30:45) }
curve(errorExample, 30, 45)
is.ex
is.expression(errorExample)
as.expression(errorExample)
expression(errorExample)
expression(errorExample)
plot(expression(errorExample))
curve(expression(errorExample))
plot(errorSum(30:45, 30:45))
sapply(30:45, errorSum, 30:45)
plot(sapply(30:45, errorSum, 30:45))
curve(sapply(30:45, errorSum, 30:45))
plot(sapply(30:45, errorSum, 30:45))
plot(sapply(30:45, errorSum, 30:45), ylab=30:45)
plot(sapply(30:45, errorSum, 30:45), xlab=30:45)
plot(sapply(30:45, errorSum, 30:45))
errorExample <- sapply(30:45, 30:45) names(errorExample) <- 30:45
errorExample <- sapply(30:45, 30:45)
errorExample <- sapply(30:45, errorSum, 30:45)
names(errorExample) <- 30:45
errorExample <- sapply(30:45, 30:45)
plot(errorExample)
errorExample
names(errorExample)
rownames(errorExample)
rownames(errorExample) <- 30:45
plot(errorExample)
errorSum(45, 30:45)
45 - 30:45
c(40, rep(45, 99))
errorExample <- sapply(30:45, errorSum, c(30, rep(45, 99)))
names(errorExample) <- 30:45
plot(errorExample)
?plot
expression(sum(abs(x - c(30, rep(45, 99)))))
e <- expression(sum(abs(x - c(30, rep(45, 99)))))
e(3)
e <- as.expression(sum(abs(x - c(30, rep(45, 99)))))
e <- as.expression(sum(abs(x - c(30, rep(45, 99)))))
expression(1 + 0:9)
length(expression(1 + 0:9))
curve(expression(1 + 0:9))
curve(sin, 0, 3)
errorExample <- function(x) {     errorSum(x, c(30, rep(45, 99))) }
curve(errorExample, 30, 45)
errorSum(30, c(30, rep(45, 99)))
errorExample <- function(x) {     errorSum(x, c(30, rep(45, 99)))
}
curve(errorExample(x), 30, 45)
plot(errorExample, 30, 45)
curve(x^2, 0, 1000)
curve(sin, 0, 1000)
curve(errorExample, 0, 1000)
curve(errorExample, 0, 1000)
errorExample(30)
errorExample(30)[0]
errorExample(30)
errorSum <- function(x, d = c(30, rep(45, 99))) sum(abs(d - x))
curve(errorSum, 30, 45)
errorSum <- function(x) sum(abs(d - c(30, rep(45, 99))))
curve(errorSum, 30, 45)
curve(errorSum, 30, 45)
errorSum <- function(x) sum(abs(x - c(30, rep(45, 99))))
errorSum <- function(x) sum(abs(x - c(30, rep(45, 99))))
curve(errorSum, 30, 45)
errorSum <- function(x) sum(abs(c(30, rep(45, 99) - x)))
curve(errorSum, 30, 45)
errorSum <- function(x) sum(abs(c(30, rep(45, 99)) - x))
curve(errorSum, 30, 45)
(45 - 30) * 99
mean(ages)
ages
str(ages)
mean(ages)
as.numeric(ages)
mean(as.numeric(ages))
mean(as.numeric(ages, na.rm = TRUE))
sum(ages)
ages[1]
ages[1] + 1
ages[1] + ages[2]
sum(ages[1:3000])
sum(ages[1:1500])
sum(ages[1:10])
sum(ages[1:100])
sum(ages[1:500])
sum(ages[1:1000])
sum(ages[1:800])
sum(ages[1:700])
sum(ages[1:600])
sum(ages[1:650])
sum(ages[1:620])
sum(ages[1:610])
sum(ages[1:615])
sum(ages[1:618])
sum(ages[1:619])
ages[619]
mean(ages[!is.na(ages)])
ages <- ages[!is.na(ages)]
mean(ages)
45 - 30
((45 - 30)^2) * 99
(45 - 30)^2
mean(30, rep(45, 99))
mean(c(30, rep(45, 99)))
marathon[,619]
marathon[619,]
max(ages)
sum(ages[==81])
sum(ages[ages==81])
match(81, ages)
marathon[2963]
marathon[2963,]
marathon[2963,]
marathon[2962,]
match(81, ages)
ages[2963]
marathon[2960:2970,]
marathon[2965]
marathon[2965,]
hist(ages)
boxplot(ages)
length(marathon)
size(marathon)
dim(marathon)
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
dim(marathon)
var(ages)
sd(ages)
sqrt(var(ages))
sd(c(30, rep(45, 99)))
quant
?quantile
quantile(ages, probs = seq(0, 0.25, 0.5, 0.75, 1))
quantile(ages, probs = c(0, 0.25, 0.5, 0.75, 1))
45 - 28
var(ages)
sd(ages)
median(ages)
?plot function
?plot.function
?dnorm
plot(dnorm(x, 0, 1))
plot(expression(dnorm(x, 0, 1)))
plot(expression('dnorm(x, 0, 1)'))
curve(dnorm(x, 0, 1))
curve(dnorm(x, 0, 1), from=0, to=80)
curve(dnorm(x, mean(ages), var(ages)), from=0, to=80)
curve(dnorm(x, mean(ages), var(ages)), from=0, to=80, ylab="P(age)", xlab="age")
mean(ages)
var(ages)
curve(dnorm(x, mean(ages), sd(ages)), from=0, to=80, ylab="P(age)", xlab="age")
mean(ages)
sd(ages)
curve(dnorm(x, mean(ages), sd(ages)), from=0, to=80, ylab="P(age)", xlab="age")
skewness(ages)
kurtosis(ages)
 barplot(table(genders))
 barplot(table(genders), ylab="frequency")
 barplot(table(genders), ylab="Frequency")
 barplot(table(genders), ylab="Frequency", xlab="Gender")
table(genders)
par(mfrow = c(2, 2)) hist(ages, main = "5 bins", xlab = "Time", breaks = 5) hist(ages, main = "10 bins", xlab = "Time", breaks = 10) hist(ages, main = "100 bins", xlab = "Time", breaks = 100) par(mfrow = c(1, 1))
hist(ages, main = "10 bins", xlab = "Time", breaks = 10)
par(mfrow = c(2, 1)) hist(ages, main = "5 bins", xlab = "Time", breaks = 5) hist(ages, main = "100 bins", xlab = "Time", breaks = 100) par(mfrow = c(1, 1))
par(mfrow = c(1, 2)) hist(ages, main = "5 bins", xlab = "Time", breaks = 5) hist(ages, main = "100 bins", xlab = "Time", breaks = 100) par(mfrow = c(1, 1))
hist(ages, main = "10 bins", xlab = "Time", breaks = 10)
hist(ages, main = "10 bins", xlab = "Age", breaks = 10)
hist(ages, main = "5 bins", xlab = "Age", breaks = 5)
hist(ages, main = "100 bins", xlab = "Age", breaks = 100)
hist(ages, main = "10 bins", xlab = "Age", breaks = 10)
hist(ages, main = "10 bins", xlab = "Age", breaks = 10)
par(mfrow = c(1, 2)) hist(ages, main = "5 bins", xlab = "Age", breaks = 5) hist(ages, main = "100 bins", xlab = "Age", breaks = 100) par(mfrow = c(1, 1))
hist(ages, main = "10 bins", xlab = "Age", breaks = 10)
mean(ages)
median(ages)
skewness(ages)
par(mfrow = c(2, 2)) hist(ages, main = "5 bins", xlab = "Age", breaks = 5) hist(ages, main = "10 bins", xlab = "Age", breaks = 10) hist(ages, main = "100 bins", xlab = "Age", breaks = 100) par(mfrow = c(1, 1))
plot(paces ~ allTimes)
plot(paces ~ ages)
plot(ages ~ paces)
agesAll <- as.integer(unlist(lapply(marathon$sex_age, getState))) ages <- ages[!is.na(agesAll)]
plot(agesAll ~ paces)
plot(agesAll ~ allTimes)
plot(allTimes ~ agesAl)
plot(allTimes ~ agesAll)
allAges <- as.integer(unlist(lapply(marathon$sex_age, getState))) ages <- ages[!is.na(allAges)]
plot(allTimes ~ allAges)
plot(allAges ~ allTimes)
plot(paces ~ allTimes)
plot(allAges ~ allTimes)
plot(allAges ~ allTimes, xlab="Time in Seconds", ylab="Age")
plot(allAges ~ allTimes, xlab="Finishing Time in Seconds", ylab="Age")
plot(paces ~ allTimes, xlab="")
plot(paces ~ allTimes, xlab="Finishing Time in Seconds", ylab="Average Time per Mile in Seconds")
plot(paces ~ allTimes, xlab="Finishing Time in Seconds", ylab="Average Time per Mile in Seconds (Pace)")
?anova
allTimes[genders='M']
allTimes[genders=='M']
mean(allTimes[genders=='M'])
sd(allTimes[genders=='M'])
simulateNormal <- function(d) {     rnorm(length(d), mean(d), sd(d)) }
simu
simulateNormal(allTimes[genders=='M'])
c(simulateNormal(allTimes[genders=='M']), simulateNormal(allTimes[genders='F']))
simulateNormal(allTimes[genders='F'])
c(simulateNormal(allTimes[genders=='M']), simulateNormal(allTimes[genders=='F']))
normalTimes <- c(simulateNormal(allTimes[genders == 'M']), simulateNormal(allTimes[genders == 'F']))c(simulateNormal(allTimes[genders=='M']), simulateNormal(allTimes[genders=='F']))
normalTimesM <- simulateNormal(allTimes[genders == 'M']) normalTimesF <- simulateNormal(allTimes[genders == 'F'])
t.te
t.test(normalTimesM, normalTimesF)
boxplot(normalTimesF)
boxplot(c(normalTimesF, normalTimesM))
normalGenders <- c(rep('M', sum(genders == 'M'), rep('F', sum(genders == 'F'))))
normalGenders <- c(rep('M', sum(genders == 'M')), rep('F', sum(genders == 'F')))
normalTimes <- c(simulateNormal(allTimes[genders == 'M']), simulateNormal(allTimes[genders == 'F']))
boxplot(normalGenders ~ normalTimes)
boxplot(normalTimes ~ normalGenders)
plot(normalTimes ~ normalGenders)
ks.test(normalTimes[normalGenders=='M'])
?ks.test
ks.test(normalTimes[normalGenders=='M'], pnorm)
ks.test(normalTimes[normalGenders=='M'], pnorm)
ks.test(rnorm(100, 0, 1), pnorm)
ks.test(rnorm(100, 33, 1), pnorm)
ks.test(normalTimes[normalGenders=='M'], pnorm)
?pnorm
ks.test(normalTimes[normalGenders == 'M'] - mean(normalTimes[normalGenders == 'M']), pnorm)
?ks.test
ks.test(normalTimes[normalGenders == 'M'], pnorm, mean(normalTimes[normalGenders == 'M']), sd(normalTimes[normalGenders == 'M']))
?t.test
t.test(normalTimes[normalGenders == 'M'], normalTimes[normalGenders == 'F'])
var.test(normalTimes[normalGenders == 'M'], normalTimes[normalGenders == 'F'])
var.test(normalTimes[normalGenders == 'M'], normalTimes[normalGenders == 'M'])
var.test(normalTimes[normalGenders == 'M'], normalTimes[normalGenders == 'F'])
var.test(normalTimes[normalGenders == 'M'], normalTimes[normalGenders == 'F'])
levene.test
??levene.test
leveneTest
library(reshape2)
library(car)
leveneTest
?ks.test
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
boxplot(ages)
allAges <- as.integer(unlist(lapply(marathon$sex_age, getState))) ages <- ages[!is.na(allAges)]
allAges <- as.integer(unlist(lapply(marathon$sex_age, getState)))
ages <- ages[!is.na(allAges)]
ages <- allAges[!is.na(allAges)]
boxplot(allAges)
boxplot(allAges ~ genders)
boxplot(allAges ~ genders, notch = TRUE)
plot(allAges ~ allTimes, xlab="Finishing Time in Seconds", ylab="Age")
plot(paces ~ allTimes, xlab="Finishing Time in Seconds", ylab="Average Time per Mile in Seconds (Pace)")
plot(allAges ~ allTimes, xlab="Finishing Time in Seconds", ylab="Age")
plot(paces ~ allTimes, xlab="Finishing Time in Seconds", ylab="Average Time per Mile in Seconds (Pace)")
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
ks.test(allT)
ks.test(allTimes[genders == 'M'], allTimes[genders == 'F'])
?ks.test
ks.test(allTimes[genders == 'M'], allTimes[genders == 'F'], exact = FALSE)
ks.test(allTimes[genders == 'M'], allTimes[genders == 'F'], exact = TRUE)
ks.test(allTimes[genders == 'M'], allTimes[genders == 'F'])
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
ks.test(allTimes[genders == 'M'], allTimes[genders == 'F'])
ks.test(allTimes[genders == 'M'],     pnorm,     mean(allTimes[genders == 'M']),     sd(allTimes[genders == 'M']))
rnorm(     length(allTimes[genders == 'M']),      mean(allTimes[genders == 'M']),      sd(allTimes[genders == 'M']))
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
?var.test
boxplot(ages ~ genders, notch = TRUE)
source("D:/src/sf2016-marathon-R/RProject/script.R", encoding = "Windows-1252")
 boxplot(ages ~ genders, notch = TRUE)
length(ages)
length(genders)
 boxplot(allAges ~ genders, notch = TRUE)
plot(ageSex)
plot(ageSex)
plot(ageSexEstimateUSA)
barplot(ageSexEstimateUSA)
barplot(ageSexEstimateUSA)
ageSexEstimateUSA
barplot(ageSexEstimateUSA[,1])
barplot(ageSexEstimateUSA[,1], ageSexEstimateUSA[,2])
barplot(ageSexEstimateUSA[,1])
ageSexEstimateUSA <- read.table(file = "2015-age-sex-estimate.txt", header = TRUE)
ageSexEstimateUSA[,3] <- ageSexEstimateUSA[,1] - ageSexEstimateUSA[,2]
ageSexEstimateUSA
names(ageSexEstimateUSA)[3] <- "F"ageSexEstimateUSA
dimnames
dimnames(ageSexEstimateUSA)[3] <- "F"
colnames(ageSexEstimateUSA)[3] <- "F"
ageSexEstimateUSA
barchart(ageSexEstimateUSA)
barchart(ageSexEstimateUSA[,1])
barchart(ageSexEstimateUSA[,1])
barchart(ageSexEstimateUSA)
hist(ageSexEstimateUSA[,1])
hist(ageSexEstimateUSA[,2])
hist(ageSexEstimateUSA[,1])
hist(ageSexEstimateUSA[,2], add=T)
?hist
hist(ageSexEstimateUSA[,2], freq=T, add=T)
?hist
barplot(ageSexEstimateUSA[,1:2], beside = T)
barplot(ageSexEstimateUSA[,1:2], beside = TRUE)
barplot(prop.table(ageSexEstimateUSA[,1:2]), beside=T)
table(ageSexEstimateUSA)
barplot(ageSexEstimateUSA, beside = TRUE)
?barplot
?prop.table
prop.table(ageSexEstimateUSA)
prop.table(ageSexEstimateUSA, 1)
prop.table(ageSexEstimateUSA)
barplot(prop.table(ageSexEstimateUSA))
?barplot
as.matrix(prop.table(ageSexEstimateUSA))
barplot(as.matrix(prop.table(ageSexEstimateUSA)))
barplot(as.matrix(prop.table(ageSexEstimateUSA)), beside = T)
barplot(as.matrix(prop.table(ageSexEstimateUSA[,1:2])), beside = T)
barplot(as.matrix(prop.table(ageSexEstimateUSA[,2:3])), beside = T)
barplot(as.matrix(prop.table(ageSexEstimateUSA[,1])), beside = T)
barplot(as.matrix(prop.table(ageSexEstimateUSA[,1], ageSexEstimateMarathon[,1])), beside = T)
ageSexEstimateMarathon
barplot(as.matrix(prop.table(ageSexEstimateUSA[,1], ageSexEstimateMarathon)), beside = T)
ageSexEstimates
prop.table(ageSexEstimates)
as.matrix(prop.table(ageSexEstimates))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE)
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE)
legend(c("USA", "Marathon"), cex = 0.75)
?leg
legend(c("USA", "Marathon"), cex = 0.75)
?legend
legend("topright", c("USA", "Marathon"), cex = 0.75)
legend("topright", c("USA", "Marathon"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE)
legend("topright", c("USA", "Marathon"), cex = 0.75)
?barplot
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 0.75))
?legend
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 0.75, bty=n))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 0.75, bty=0))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 0.75, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 1, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 0.8, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 1, bty="n"))
?legend
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(inset = 0.4, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(inset = 0.1, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 1, bty="n"))
?legend
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(x = 1, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(x = 100, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(x = 100, y = 100, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(x = 500, y = 500, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(x = 500, y = 500, bty="n"))
?legend
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(x = 1, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(x = 50, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(x = 0.5, bty="n"))
?legend
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(x = 0.5, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(x = 25, bty="n"))
?legend
barplot(as.matrix(prop.table(ageSexEstimates)), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 0.75, bty="n"))
barplot(as.matrix(prop.table(ageSexEstimates) * 100), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 0.75, bty="n"), ylab="%")
barplot(as.matrix(prop.table(ageSexEstimates) * 100), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 0.75, bty="n"), ylab="%", xlab="Age Group")
barplot(as.matrix(prop.table(ageSexEstimates) * 100), beside=TRUE, legend = c("USA", "Marathon"), args.legend = list(cex = 0.75, bty="n"), ylab="%", xlab="Age Group")
allTimes
min(allTimes)
min(allTimes) / 3600
min(allTimes) / 60 - (3600 & 2)
min(allTimes) / 60 - (3600 / 2)
min(allTimes) / 60 - (3600 * 2)
min(allTimes) / 60
min(allTimes) / 60 - 120
chisq.test(rbind(t(as.vector(ageSexEstimateUSA[2])), as.vector(ageSexEstimateMarathon)))
chisq.test(rbind(t(as.vector(ageSexEstimateUSA[2])), as.vector(ageSexEstimateMarathon)))
comparisonAgeGroups <- rbind(t(as.vector(ageSexEstimateUSA[2])), as.vector(ageSexEstimateMarathon))
chisq.test(comparisonAgeGroups)
source("D:/src/sf2016-marathon-R/RProject/lecture.R", encoding = "Windows-1252")
mean(ages)
c(ages, 500)
mean(c(ages, 500))
mean(ages)
mean(c(ages, 500))
mean(c(ages, 5000))
mean(c(ages, 50000))
mean(c(ages, 100000))
median(c(ages, 100000))
median(ages)
var(ages)
sd(ages)
sqrt(var(ages))
?var
quantile(ages, probs = c(0, 0.25, 0.5, 0.75, 1))
45 - 28
45 - 28 # <- IQR
curve(dnorm(x, mean(ages), sd(ages)), from = 0, to = 80)
curve(dnorm(x, mean(ages), sd(ages)), from = min(ages), to = max(ages))
skewness(ages)
kurtosis(ages)
table(genders)
table(genders)[1] / table(genders)[0]
table(genders)[1] 
table(genders)[2] / table(genders)[1]
table(genders)
4171 / 2163
barplot(genders)
barplot(genders)
barplot(table(genders))
# https://goo.gl/25XzTn
hist(ages)
?hist
hist(5)
hist(ages, 5)
hist(ages, 100)hist(ages, 5)
hist(ages, 100)
